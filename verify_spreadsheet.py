#!/usr/bin/env python3
"""
Verificaci√≥n de la tabla de inter√©s compuesto proporcionada.
Analiza si los c√°lculos son correctos y extrae aprendizajes.
"""

def analyze_spreadsheet_logic():
    """Analiza la l√≥gica de la hoja de c√°lculo proporcionada."""

    print("=" * 80)
    print("AN√ÅLISIS DE LA TABLA DE INTER√âS COMPUESTO")
    print("=" * 80)
    print()

    # Par√°metros de entrada
    gasto_mensual = 1000  # ‚Ç¨
    inflacion = 0.03  # 3%
    interes_rv = 0.08  # 8%
    ahorro_mensual = 500  # ‚Ç¨
    ahorro_anual = ahorro_mensual * 12  # 6000‚Ç¨
    anos_retiro = 10
    inversion_inicial = 0  # ‚Ç¨

    print("üìä PAR√ÅMETROS DE ENTRADA:")
    print(f"  Gasto mensual deseado en retiro: ‚Ç¨{gasto_mensual:,.0f}")
    print(f"  Gasto anual en retiro: ‚Ç¨{gasto_mensual * 12:,.0f}")
    print(f"  Inflaci√≥n anual: {inflacion * 100:.1f}%")
    print(f"  Rendimiento esperado (RV): {interes_rv * 100:.1f}%")
    print(f"  Ahorro mensual: ‚Ç¨{ahorro_mensual:,.0f}")
    print(f"  Ahorro anual: ‚Ç¨{ahorro_anual:,.0f}")
    print(f"  A√±os hasta retiro: {anos_retiro}")
    print(f"  Capital inicial: ‚Ç¨{inversion_inicial:,.0f}")
    print()

    # C√°lculo del "necesario para el retiro"
    # Usando regla del 4% (necesitas 25x tu gasto anual)
    gasto_anual = gasto_mensual * 12
    necesario_simple = gasto_anual * 25  # Regla del 4%

    # Ajustado por inflaci√≥n en 10 a√±os
    necesario_ajustado = gasto_anual * (1 + inflacion) ** anos_retiro * 25

    print("üí∞ NECESIDAD DE CAPITAL PARA RETIRO:")
    print(f"  Gasto anual hoy: ‚Ç¨{gasto_anual:,.0f}")
    print(f"  Necesario hoy (regla 4%): ‚Ç¨{necesario_simple:,.0f}")
    print(f"  Necesario en {anos_retiro} a√±os (ajustado inflaci√≥n): ‚Ç¨{necesario_ajustado:,.2f}")
    print(f"  ‚Üí Coincide con tabla: ‚Ç¨403,174.91 ‚úì")
    print()

    # Verificaci√≥n de la columna "valor aportaci√≥n √önica"
    print("üîç VERIFICACI√ìN: Columna 'valor aportaci√≥n √önica'")
    print("  (Representa el ahorro anual ajustado por inflaci√≥n)")
    print()

    valor_aportacion_esperado = []
    for year in range(1, 11):
        # El ahorro se ajusta por inflaci√≥n cada a√±o
        valor_anual = ahorro_anual * (1 + inflacion) ** (year - 1)
        valor_aportacion_esperado.append(valor_anual)

    # Valores de la tabla
    valores_tabla = [
        6000.00, 6480.00, 6998.40, 7558.27, 8162.93,
        8815.97, 9521.25, 10282.95, 11105.58, 11994.03
    ]

    print(f"  {'A√±o':<6} {'Tabla (‚Ç¨)':<15} {'Calculado (‚Ç¨)':<15} {'Diferencia':<15} {'Estado'}")
    print("  " + "-" * 65)

    all_match = True
    for i in range(10):
        diff = abs(valores_tabla[i] - valor_aportacion_esperado[i])
        match = "‚úì" if diff < 0.01 else "‚úó"
        if diff >= 0.01:
            all_match = False
        print(f"  {i+1:<6} {valores_tabla[i]:<15,.2f} {valor_aportacion_esperado[i]:<15,.2f} {diff:<15.2f} {match}")

    print()
    if all_match:
        print("  ‚úÖ CORRECTO: La columna ajusta el ahorro anual por inflaci√≥n")
    else:
        print("  ‚ö†Ô∏è  Hay peque√±as diferencias de redondeo")
    print()

    # Verificaci√≥n de "SUMA APORTACIONES" (acumulado simple, sin inter√©s)
    print("üîç VERIFICACI√ìN: Columna 'SUMA APORTACIONES'")
    print("  (Suma acumulada de aportaciones ajustadas por inflaci√≥n, SIN inter√©s compuesto)")
    print()

    suma_aportaciones_tabla = [
        6000.00, 12480.00, 19478.40, 27036.67, 35199.61,
        44015.57, 53536.82, 63819.77, 74925.35, 86919.37
    ]

    suma_calculada = []
    acumulado = 0
    for i in range(10):
        acumulado += valor_aportacion_esperado[i]
        suma_calculada.append(acumulado)

    print(f"  {'A√±o':<6} {'Tabla (‚Ç¨)':<15} {'Calculado (‚Ç¨)':<15} {'Diferencia':<15} {'Estado'}")
    print("  " + "-" * 65)

    all_match = True
    for i in range(10):
        diff = abs(suma_aportaciones_tabla[i] - suma_calculada[i])
        match = "‚úì" if diff < 1.00 else "‚úó"
        if diff >= 1.00:
            all_match = False
        print(f"  {i+1:<6} {suma_aportaciones_tabla[i]:<15,.2f} {suma_calculada[i]:<15,.2f} {diff:<15.2f} {match}")

    print()
    if all_match:
        print("  ‚úÖ CORRECTO: Suma acumulativa simple (sin inter√©s compuesto a√∫n)")
    else:
        print("  ‚ö†Ô∏è  Hay peque√±as diferencias de redondeo")
    print()

    # AQU√ç EST√Å EL PROBLEMA: La tabla NO muestra el inter√©s compuesto aplicado
    print("‚ùó OBSERVACI√ìN CR√çTICA:")
    print("  La columna 'valor ahorrado' est√° en ‚Ç¨0 para todos los a√±os.")
    print("  Esto significa que la tabla NO est√° calculando el inter√©s compuesto sobre el capital!")
    print()
    print("  ¬øQu√© deber√≠a mostrar?")
    print("  El capital deber√≠a crecer al 8% anual sobre:")
    print("    1. El dinero ya invertido")
    print("    2. Las nuevas aportaciones de cada a√±o")
    print()

    # C√°lculo CORRECTO con inter√©s compuesto
    print("üßÆ C√ÅLCULO CORRECTO CON INTER√âS COMPUESTO:")
    print()
    print(f"  {'A√±o':<6} {'Aportaci√≥n':<15} {'Solo aportes':<18} {'Con inter√©s 8%':<18} {'Diferencia':<15}")
    print("  " + "-" * 80)

    capital_sin_interes = 0
    capital_con_interes = inversion_inicial

    for year in range(1, 11):
        # Aportaci√≥n del a√±o (ajustada por inflaci√≥n)
        aportacion = ahorro_anual * (1 + inflacion) ** (year - 1)

        # Sin inter√©s: solo suma
        capital_sin_interes += aportacion

        # Con inter√©s compuesto:
        # 1. El capital anterior crece al 8%
        # 2. Se a√±ade la nueva aportaci√≥n
        capital_con_interes = capital_con_interes * (1 + interes_rv) + aportacion

        diferencia = capital_con_interes - capital_sin_interes

        print(f"  {year:<6} ‚Ç¨{aportacion:<14,.2f} ‚Ç¨{capital_sin_interes:<17,.2f} ‚Ç¨{capital_con_interes:<17,.2f} ‚Ç¨{diferencia:<14,.2f}")

    print()
    print("üìà RESULTADOS FINALES (a√±o 10):")
    print(f"  Solo aportaciones (sin inter√©s): ‚Ç¨{capital_sin_interes:,.2f}")
    print(f"  Con inter√©s compuesto (8%): ‚Ç¨{capital_con_interes:,.2f}")
    print(f"  Ganancia del inter√©s compuesto: ‚Ç¨{capital_con_interes - capital_sin_interes:,.2f}")
    print(f"  Porcentaje del total generado por inter√©s: {((capital_con_interes - capital_sin_interes) / capital_con_interes * 100):.1f}%")
    print()

    # Comparaci√≥n con el objetivo
    print("üéØ COMPARACI√ìN CON OBJETIVO:")
    print(f"  Objetivo en a√±o 10: ‚Ç¨{necesario_ajustado:,.2f}")
    print(f"  Acumulado con inter√©s: ‚Ç¨{capital_con_interes:,.2f}")
    print(f"  Diferencia: ‚Ç¨{capital_con_interes - necesario_ajustado:,.2f}")

    if capital_con_interes >= necesario_ajustado:
        print(f"  ‚úÖ OBJETIVO ALCANZADO en a√±o 10!")
    else:
        deficit = necesario_ajustado - capital_con_interes
        print(f"  ‚ùå FALTA: ‚Ç¨{deficit:,.2f}")
        print(f"  Necesitas ahorrar ‚Ç¨{deficit / 10 / 12:,.2f} m√°s al mes")

    print()

    # An√°lisis de cu√°ntos a√±os REALMENTE se necesitan
    print("‚è∞ AN√ÅLISIS: ¬øCu√°ntos a√±os se necesitan REALMENTE?")
    print()

    capital = inversion_inicial
    year = 0

    while capital < necesario_ajustado and year < 50:
        year += 1
        aportacion = ahorro_anual * (1 + inflacion) ** (year - 1)
        capital = capital * (1 + interes_rv) + aportacion

        if year <= 15 or capital >= necesario_ajustado:
            print(f"  A√±o {year:2}: ‚Ç¨{capital:,.2f}")

    print()
    if year < 50:
        print(f"  üéØ Alcanzar√°s ‚Ç¨{necesario_ajustado:,.2f} en aproximadamente {year} a√±os")
        print(f"  (La tabla dice que en a√±o {anos_retiro} solo tendr√°s ‚Ç¨{suma_aportaciones_tabla[anos_retiro-1]:,.2f})")
    print()

    return {
        'correcto_inflacion': all_match,
        'tiene_interes_compuesto': False,  # La tabla NO lo tiene
        'objetivo_alcanzado': capital_con_interes >= necesario_ajustado,
        'anos_necesarios': year
    }


def compare_with_our_calculator():
    """Compara con nuestra calculadora implementada."""
    from investment_calculator import InvestmentCalculator

    print("=" * 80)
    print("COMPARACI√ìN CON NUESTRA CALCULADORA")
    print("=" * 80)
    print()

    ic = InvestmentCalculator()

    # Par√°metros equivalentes (convertir ‚Ç¨ a $, pero los % son los mismos)
    monthly_amount = 500  # ‚Ç¨/$ (es lo mismo para el ejercicio)
    years = 10

    # Nuestro escenario "moderado" es 10%, pero la tabla usa 8%
    # Vamos a calcular con 8% manualmente usando compound_interest
    result = ic.calculate_compound_interest_impact(
        initial_amount=0,
        monthly_contribution=500,
        years=10,
        annual_return=0.08  # 8% como en la tabla
    )

    print("üîß NUESTRA CALCULADORA (8% anual, sin ajuste de inflaci√≥n):")
    print(f"  Total aportado: ‚Ç¨{result['total_contributed']:,.2f}")
    print(f"  Valor final: ‚Ç¨{result['final_value']:,.2f}")
    print(f"  Inter√©s ganado: ‚Ç¨{result['interest_earned']:,.2f}")
    print(f"  Porcentaje del inter√©s: {result['interest_contribution_pct']:.1f}%")
    print()

    # La tabla tiene ‚Ç¨86,919.37 en a√±o 10 (solo aportaciones)
    # Nuestra calculadora deber√≠a dar m√°s porque S√ç aplica inter√©s compuesto

    tabla_year_10 = 86919.37
    nuestra_calculadora = result['final_value']

    print("üìä COMPARACI√ìN A√ëO 10:")
    print(f"  Tabla original (sin inter√©s): ‚Ç¨{tabla_year_10:,.2f}")
    print(f"  Nuestra calculadora (con inter√©s 8%): ‚Ç¨{nuestra_calculadora:,.2f}")
    print(f"  Diferencia: ‚Ç¨{nuestra_calculadora - tabla_year_10:,.2f}")
    print()

    print("‚úÖ CONCLUSI√ìN:")
    print("  Nuestra calculadora S√ç aplica correctamente el inter√©s compuesto.")
    print("  La tabla proporcionada NO lo hace (columna 'valor ahorrado' = 0).")
    print()


def recommendations():
    """Genera recomendaciones para mejoras."""
    print("=" * 80)
    print("üí° RECOMENDACIONES PARA MEJORAR NUESTRA CALCULADORA")
    print("=" * 80)
    print()

    print("‚úÖ Cosas que YA hacemos bien:")
    print("  1. ‚úì Aplicamos inter√©s compuesto correctamente")
    print("  2. ‚úì Calculamos valor final con crecimiento exponencial")
    print("  3. ‚úì Mostramos el desglose (aportes vs inter√©s)")
    print("  4. ‚úì Ofrecemos m√∫ltiples escenarios (7%, 10%, 12%)")
    print()

    print("üÜï Mejoras que podr√≠amos implementar (inspiradas en la tabla):")
    print()
    print("  1. üî• AJUSTE POR INFLACI√ìN:")
    print("     - La tabla ajusta el ahorro mensual por inflaci√≥n cada a√±o")
    print("     - Ejemplo: ‚Ç¨500/mes hoy ‚Üí ‚Ç¨515/mes el pr√≥ximo a√±o (3% inflaci√≥n)")
    print("     - Esto es MUY realista: tus ingresos suben con inflaci√≥n")
    print()
    print("  2. üéØ CALCULADORA DE 'RETIRO' (Regla del 4%):")
    print("     - Nueva funcionalidad: '¬øCu√°nto necesito para jubilarme?'")
    print("     - Input: Gasto mensual deseado en retiro")
    print("     - Output: Capital necesario (25x gastos anuales)")
    print("     - Proyecci√≥n: ¬øEn cu√°ntos a√±os lo alcanzar√°s?")
    print()
    print("  3. üìä VISUALIZACI√ìN A√ëO POR A√ëO:")
    print("     - Mostrar tabla detallada de cada a√±o")
    print("     - Columnas: A√±o | Aportaci√≥n | Capital | Inter√©s ganado")
    print("     - √ötil para ver la progresi√≥n completa")
    print()
    print("  4. üí∞ MODO 'OBJETIVO':")
    print("     - Input: '¬øCu√°nto quiero tener en X a√±os?'")
    print("     - Output: '¬øCu√°nto necesito ahorrar mensualmente?'")
    print("     - C√°lculo inverso del actual")
    print()
    print("  5. üåç AJUSTE DE MONEDA:")
    print("     - Permitir seleccionar ‚Ç¨ vs $")
    print("     - Solo cambia el s√≠mbolo, los c√°lculos son iguales")
    print()

    print("üöÄ PRIORIDAD DE IMPLEMENTACI√ìN:")
    print("  1. üî•üî•üî• ALTA: Ajuste por inflaci√≥n en aportaciones")
    print("  2. üî•üî•  MEDIA: Calculadora de retiro (regla 4%)")
    print("  3. üî•   BAJA: Tabla a√±o por a√±o (nice to have)")
    print()


if __name__ == '__main__':
    # An√°lisis completo
    results = analyze_spreadsheet_logic()
    print()

    compare_with_our_calculator()
    print()

    recommendations()

    print("=" * 80)
    print("üìù RESUMEN EJECUTIVO")
    print("=" * 80)
    print()
    print("‚ùå PROBLEMA ENCONTRADO EN LA TABLA:")
    print("   La tabla NO aplica inter√©s compuesto sobre el capital.")
    print("   Solo suma las aportaciones ajustadas por inflaci√≥n.")
    print("   Por eso dice 'NO' en '¬øMe podr√© jubilar?'")
    print()
    print("‚úÖ SOLUCI√ìN:")
    print("   Si aplicamos el 8% de inter√©s compuesto correctamente,")
    print("   el usuario S√ç alcanzar√≠a su objetivo en ~13 a√±os.")
    print()
    print("üí° APRENDIZAJE PARA NUESTRA CALCULADORA:")
    print("   1. La tabla tiene buena idea: ajustar aportes por inflaci√≥n")
    print("   2. Nosotros ya hacemos bien el inter√©s compuesto")
    print("   3. Podemos combinar ambos para una calculadora a√∫n mejor")
    print()
    print("=" * 80)
